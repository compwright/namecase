{"version":3,"sources":["index.js"],"names":["checkName","name","toLowerCase","toUpperCase","normalize","replace","nc","el","opt","trim","splitters","s","r","i","length","elArr","split","j","charAt","slice","join","test","x","y","z","substring","v","individualFields","namecase","input","Array","isArray","map","module","exports"],"mappings":"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","file":"namecase.min.js","sourceRoot":"../src","sourcesContent":["// Don't change capitalization unless capitalization isn't set\nconst checkName = name => name === name.toLowerCase() || name === name.toUpperCase();\n\n// Strip out extraneous spaces\nconst normalize = name => name.replace(/\\s{2,}/g, ' ');\n\n// Actual case fixing function\nfunction nc (el, opt = {}) {\n  el = el.trim().toLowerCase();\n\n  // Split names on regex whitespace, dash or apostrophe, workaround for\n  // Javascript regex word boundary \\b splitting on unicode characters\n  // http://stackoverflow.com/questions/5311618/javascript-regular-expression-problem-with-b-and-international-characters\n  const splitters = [\n    { s: /\\s/, r: ' ' },\n    { s: /-/, r: '-' },\n    { s: /'/, r: \"'\" },\n    { s: /\"/, r: '\"' },\n    { s: /\\(/, r: '(' },\n    { s: /\\./, r: '.' },\n    { s: /,/, r: ',' },\n    { s: /\\//, r: '/' }\n  ];\n\n  for (let i = 0; i < splitters.length; i++) {\n    const elArr = el.split(splitters[i].s);\n    for (let j = 0; j < elArr.length; j++) {\n      elArr[j] = elArr[j].charAt(0).toUpperCase() + elArr[j].slice(1);\n    }\n    el = elArr.join(splitters[i].r);\n  }\n\n  // Name case Mcs and Macs\n  // Exclude names with 1-2 letters after prefix like Mack, Macky, Mace\n  // Exclude names ending in a,c,i,o, or j are typically Polish or Italian\n  if (\n    /\\bMac[A-Za-z]{2,}[^aciozj]\\b/.test(el) ||\n    /\\bMc/.test(el)\n  ) {\n    el = el.replace(\n      /\\b(Ma?c)([A-Za-z]+)/,\n      (x, y, z) => y + z.charAt(0).toUpperCase() + z.substring(1)\n    );\n\n    // Now correct for \"Mac\" exceptions\n    el = el\n      .replace(/\\bMacEvicius\\b/, 'Macevicius')\n      .replace(/\\bMacHado\\b/, 'Machado')\n      .replace(/\\bMacHar\\b/, 'Machar')\n      .replace(/\\bMacHin\\b/, 'Machin')\n      .replace(/\\bMacHlin\\b/, 'Machlin')\n      .replace(/\\bMacIas\\b/, 'Macias')\n      .replace(/\\bMacIulis\\b/, 'Maciulis')\n      .replace(/\\bMacKie\\b/, 'Mackie')\n      .replace(/\\bMacKle\\b/, 'Mackle')\n      .replace(/\\bMacKlin\\b/, 'Macklin')\n      .replace(/\\bMacQuarie\\b/, 'Macquarie')\n      .replace(/\\bMacOmber\\b/, 'Macomber')\n      .replace(/\\bMacIn\\b/, 'Macin')\n      .replace(/\\bMacKintosh\\b/, 'Mackintosh')\n      .replace(/\\bMacKen\\b/, 'Macken')\n      .replace(/\\bMacHen\\b/, 'Machen')\n      .replace(/\\bMacHiel\\b/, 'Machiel')\n      .replace(/\\bMacIol\\b/, 'Maciol')\n      .replace(/\\bMacKell\\b/, 'Mackell')\n      .replace(/\\bMacKlem\\b/, 'Macklem')\n      .replace(/\\bMacKrell\\b/, 'Mackrell')\n      .replace(/\\bMacLin\\b/, 'Maclin')\n      .replace(/\\bMacKey\\b/, 'Mackey')\n      .replace(/\\bMacKley\\b/, 'Mackley')\n      .replace(/\\bMacHell\\b/, 'Machell')\n      .replace(/\\bMacHon\\b/, 'Machon')\n      .replace(/\\bMacAyla\\b/, 'Macayla');\n  }\n\n  // And correct Mac exceptions otherwise missed\n  el = el\n    .replace(/\\bMacmurdo/, 'MacMurdo')\n    .replace(/\\bMacisaac/, 'MacIsaac')\n\n  // Fixes for \"son (daughter) of\" etc. in various languages.\n    .replace(/\\bAl(?=\\s+\\w)\\b/g, 'al') // al Arabic or forename Al.\n    .replace(/\\bAp\\b/g, 'ap') // ap Welsh.\n    .replace(/\\bBen(?=\\s+\\w)\\b/g, 'ben') // ben Hebrew or forename Ben.\n    .replace(/\\bDell([ae])\\b/g, 'dell$1') // della and delle Italian.\n    .replace(/\\bD([aeiu])\\b/g, 'd$1') // da, de, di Italian; du French.\n    .replace(/\\bDe([lr])\\b/g, 'de$1') // del Italian; der Dutch/Flemish.\n    .replace(/\\bEl\\b/g, 'el') // el Greek\n    .replace(/\\bLa\\b/g, 'la') // la French\n    .replace(/\\bLe(?=\\s+\\w)\\b/g, 'le') // le French\n    .replace(/\\bLo\\b/g, 'lo') // lo Italian\n    .replace(/\\bVan(?=\\s+\\w)\\b/g, 'van') // van German or forename Van.\n    .replace(/\\bVon\\b/g, 'von') // von Dutch/Flemish\n\n  // Fixes for roman numeral names, e.g. Henry VIII\n    .replace(/\\b(?:\\d{4}|(?:[IVX])(?:X{0,3}I{0,3}|X{0,2}VI{0,3}|X{0,2}I?[VX]))$/i, v => v.toUpperCase())\n\n  // Nation of Islam 2X, 3X, etc. names\n    .replace(/\\b[0-9](x)\\b/, v => v.toUpperCase())\n\n  // Somewhat arbitrary rule where two letter combos not containing vowels should be capitalized\n  // fixes /JJ Abrams/ and /JD Salinger/\n  // With some exceptions\n    .replace(/(?:^|\\\\s)[bcdfghjklmnpqrstvwxzBCDFGHJKLMNPQRSTVWXZ]{2}\\s/, v => v.toUpperCase())\n    .replace(/\\bMR\\.?\\b/, 'Mr')\n    .replace(/\\bMS\\.?\\b/, 'Ms')\n    .replace(/\\bDR\\.?\\b/, 'Dr')\n    .replace(/\\bST\\.?\\b/, 'St')\n    .replace(/\\bJR\\.?\\b/, 'Jr')\n    .replace(/\\bSR\\.?\\b/, 'Sr')\n    .replace(/\\bLT\\.?\\b/, 'Lt')\n\n  // lowercase words\n    .replace(/\\bThe\\b/g, 'the')\n    .replace(/\\bOf\\b/g, 'of')\n    .replace(/\\bAnd\\b/g, 'and')\n    .replace(/\\bY\\s/g, 'y')\n\n  // strip extra spaces\n    .replace(/\\s{2,}/g, ' ');\n\n  // check if we should force the first character to caps\n  if (opt.individualFields === true) {\n    // first character may be lowercase\n    return el;\n  }\n\n  // force first character to be uppercase\n  return el.charAt(0).toUpperCase() + el.substring(1);\n}\n\nfunction namecase (input, opt) {\n  if (Array.isArray(input)) {\n    return input.map(namecase);\n  }\n\n  if (typeof input === 'string') {\n    return nc(input, opt);\n  }\n\n  return input;\n}\n\nmodule.exports = namecase;\nmodule.exports.checkName = checkName;\nmodule.exports.normalize = normalize;\n"]}